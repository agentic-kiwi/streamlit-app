import streamlit as st
import json
import pandas as pd
from datetime import datetime
from typing import List, Dict, Any
import io
import base64

class ChatManager:
    def __init__(self):
        self.chat_history_key = "chat_sessions"
        self.ensure_chat_history()
    
    def ensure_chat_history(self):
        """Initialize chat history in session state"""
        if self.chat_history_key not in st.session_state:
            st.session_state[self.chat_history_key] = {}
    
    def save_current_chat(self, session_name: str = None) -> str:
        """Save current chat session"""
        if not session_name:
            session_name = f"Chat_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        chat_data = {
            "name": session_name,
            "timestamp": datetime.now().isoformat(),
            "topic": st.session_state.get("current_topic", "General"),
            "messages": st.session_state.get("messages", []),
            "message_count": len(st.session_state.get("messages", []))
        }
        
        st.session_state[self.chat_history_key][session_name] = chat_data
        return session_name
    
    def load_chat(self, session_name: str) -> bool:
        """Load a saved chat session"""
        if session_name in st.session_state[self.chat_history_key]:
            chat_data = st.session_state[self.chat_history_key][session_name]
            st.session_state.messages = chat_data["messages"]
            st.session_state.current_topic = chat_data["topic"]
            return True
        return False
    
    def delete_chat(self, session_name: str) -> bool:
        """Delete a saved chat session"""
        if session_name in st.session_state[self.chat_history_key]:
            del st.session_state[self.chat_history_key][session_name]
            return True
        return False
    
    def get_saved_chats(self) -> Dict[str, Dict]:
        """Get all saved chat sessions"""
        return st.session_state[self.chat_history_key]
    
    def export_chat_json(self, messages: List[Dict] = None) -> str:
        """Export chat as JSON"""
        if messages is None:
            messages = st.session_state.get("messages", [])
        
        export_data = {
            "export_info": {
                "timestamp": datetime.now().isoformat(),
                "topic": st.session_state.get("current_topic", "General"),
                "app": "AI Learning Assistant",
                "total_messages": len(messages)
            },
            "conversation": messages
        }
        
        return json.dumps(export_data, indent=2, ensure_ascii=False)
    
    def export_chat_txt(self, messages: List[Dict] = None) -> str:
        """Export chat as readable text"""
        if messages is None:
            messages = st.session_state.get("messages", [])
        
        text_lines = []
        text_lines.append("=" * 50)
        text_lines.append("AI LEARNING ASSISTANT - CHAT EXPORT")
        text_lines.append("=" * 50)
        text_lines.append(f"Topic: {st.session_state.get('current_topic', 'General')}")
        text_lines.append(f"Export Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        text_lines.append(f"Total Messages: {len(messages)}")
        text_lines.append("=" * 50)
        text_lines.append("")
        
        for i, message in enumerate(messages, 1):
            role = "🙋 YOU" if message["role"] == "user" else "🤖 AI ASSISTANT"
            text_lines.append(f"[{i}] {role}:")
            text_lines.append("-" * 30)
            
            if message["role"] == "assistant" and "type" in message:
                if message["type"] == "structured":
                    text_lines.append("📊 STRUCTURED ANALYSIS:")
                    content = str(message["content"])
                elif message["type"] == "parallel":
                    text_lines.append("👥 MULTIPLE PERSPECTIVES:")
                    content = "\n".join([f"\n{k.upper()}: {v}" for k, v in message["content"].items()])
                else:
                    content = message["content"]
            else:
                content = message["content"]
            
            text_lines.append(content)
            text_lines.append("")
        
        text_lines.append("=" * 50)
        text_lines.append("Generated by AI Learning Assistant")
        text_lines.append("https://github.com/agentic-kiwi/streamlit-app")
        
        return "\n".join(text_lines)
    
    def export_chat_csv(self, messages: List[Dict] = None) -> str:
        """Export chat as CSV"""
        if messages is None:
            messages = st.session_state.get("messages", [])
        
        # Prepare data for CSV
        csv_data = []
        for i, message in enumerate(messages, 1):
            row = {
                "message_id": i,
                "timestamp": datetime.now().isoformat(),
                "role": message["role"],
                "content": str(message["content"]),
                "message_type": message.get("type", "standard"),
                "topic": st.session_state.get("current_topic", "General")
            }
            csv_data.append(row)
        
        # Create DataFrame and convert to CSV
        df = pd.DataFrame(csv_data)
        return df.to_csv(index=False)
    
    def create_download_link(self, content: str, filename: str, mime_type: str) -> str:
        """Create a download link for content"""
        b64_content = base64.b64encode(content.encode()).decode()
        href = f'<a href="data:{mime_type};base64,{b64_content}" download="{filename}">📥 Download {filename}</a>'
        return href
    
    def get_chat_stats(self, messages: List[Dict] = None) -> Dict[str, Any]:
        """Get statistics about the chat"""
        if messages is None:
            messages = st.session_state.get("messages", [])
        
        user_messages = [m for m in messages if m["role"] == "user"]
        assistant_messages = [m for m in messages if m["role"] == "assistant"]
        
        total_chars = sum(len(str(m["content"])) for m in messages)
        
        stats = {
            "total_messages": len(messages),
            "user_messages": len(user_messages),
            "assistant_messages": len(assistant_messages),
            "total_characters": total_chars,
            "avg_message_length": total_chars // len(messages) if messages else 0,
            "topic": st.session_state.get("current_topic", "General"),
            "conversation_started": "Yes" if messages else "No"
        }
        
        return stats

def show_chat_export_ui():
    """Show chat export interface in sidebar"""
    chat_manager = ChatManager()
    messages = st.session_state.get("messages", [])
    
    if not messages:
        st.sidebar.info("💬 Start a conversation to enable export options")
        return
    
    st.sidebar.markdown("### 💾 Chat Management")
    
    # Save current chat
    with st.sidebar.expander("💾 Save Chat"):
        save_name = st.text_input("Chat Name", placeholder="My Learning Session", key="save_chat_name")
        if st.button("💾 Save Current Chat", use_container_width=True):
            if save_name:
                session_name = chat_manager.save_current_chat(save_name)
                st.success(f"✅ Chat saved as '{session_name}'")
            else:
                session_name = chat_manager.save_current_chat()
                st.success(f"✅ Chat saved as '{session_name}'")
    
    # Load saved chats
    saved_chats = chat_manager.get_saved_chats()
    if saved_chats:
        with st.sidebar.expander("📂 Load Saved Chats"):
            for name, data in saved_chats.items():
                col1, col2 = st.columns([3, 1])
                with col1:
                    if st.button(f"📄 {name}", key=f"load_{name}", use_container_width=True):
                        if chat_manager.load_chat(name):
                            st.success(f"✅ Loaded '{name}'")
                            st.rerun()
                with col2:
                    if st.button("🗑️", key=f"delete_{name}", help=f"Delete {name}"):
                        if chat_manager.delete_chat(name):
                            st.success(f"🗑️ Deleted '{name}'")
                            st.rerun()
                
                st.caption(f"📅 {data['timestamp'][:16]} | 💬 {data['message_count']} msgs")
    
    # Export options
    with st.sidebar.expander("📤 Export Chat"):
        st.markdown("**Choose format:**")
        
        # Chat stats
        stats = chat_manager.get_chat_stats()
        st.metric("Messages", stats["total_messages"])
        st.metric("Characters", stats["total_characters"])
        
        # Export buttons
        col1, col2 = st.columns(2)
        
        with col1:
            # JSON Export
            if st.button("📋 JSON", use_container_width=True):
                json_content = chat_manager.export_chat_json()
                filename = f"chat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                st.download_button(
                    label="📥 Download JSON",
                    data=json_content,
                    file_name=filename,
                    mime="application/json",
                    use_container_width=True
                )
        
        with col2:
            # TXT Export
            if st.button("📝 TXT", use_container_width=True):
                txt_content = chat_manager.export_chat_txt()
                filename = f"chat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
                st.download_button(
                    label="📥 Download TXT",
                    data=txt_content,
                    file_name=filename,
                    mime="text/plain",
                    use_container_width=True
                )
        
        # CSV Export
        if st.button("📊 CSV", use_container_width=True):
            csv_content = chat_manager.export_chat_csv()
            filename = f"chat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            st.download_button(
                label="📥 Download CSV",
                data=csv_content,
                file_name=filename,
                mime="text/csv",
                use_container_width=True
            )
        
        st.info("💡 Files download to your Downloads folder")